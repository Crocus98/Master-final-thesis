-->Run the GenerateProofAndVerifyIt.ps1 (from the server folder) file to launch all the commands listed in this file together.
-->Otherwise run them manually 1 by 1 following the list below.

-->Command: .\GenerateProofAndVerifyIt.ps1  -CircuitName "circuit_name" -CircuitDir ".\src\circuits\CircuitFolder\"

1. Compile the Circuit:
   circom FileName.circom --r1cs --wasm --sym -o build

   //We can use the option --c before the --o to generate a file_cpp directory

1.1 Check curve powersoftau
   snarkjs r1cs info build/FileName.r1cs //check constraints

2. Generate the Witness:
   node build/FileName_js/generate_witness.js build/FileName_js/FileName.wasm input.json witness.wtns

   //In the cpp directory we can call ./file_cpp input.json witness.wtns to obtain the same result

3. Set Up the Trusted Setup:
   //Non circuit specific ceremony
   snarkjs powersoftau new bn128 12 pot12_0000.ptau -v 
   //We may need to increase the complexity for the power of tau ceremony to more than 12 if necessary
   //The number depends on the total number of constraints

   snarkjs powersoftau contribute pot12_0000.ptau pot12_0001.ptau --name="First contribution" -v
   
   //Circuit specific after this commadn which initialize phase2
   snarkjs powersoftau prepare phase2 pot12_0001.ptau pot12_final.ptau -v

4. Generate the .zkey File:
   snarkjs groth16 setup build/FileName.r1cs pot12_final.ptau build/circuit_0000.zkey
   snarkjs zkey contribute build/circuit_0000.zkey build/circuit_final.zkey --name="ZK_DIGSIG_KYC" -v
   snarkjs zkey export verificationkey build/circuit_final.zkey build/verification_key.json

5. Generate the Proof:
   snarkjs groth16 prove build/circuit_final.zkey witness.wtns proof.json public.json

6. Verify the Proof:
   snarkjs groth16 verify build/verification_key.json public.json proof.json

If everything is correct, you should see: snarkJS: OK!


7. Solidity code:
   snarkjs zkey export solidityverifier build/circuit_final.zkey verifier.sol
